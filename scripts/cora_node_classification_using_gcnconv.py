# -*- coding: utf-8 -*-
"""Cora Node Classification using GCNConv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7AFxPyIh-JXYfLkco5eLsHFmJYYBbdH
"""

#!pip install -q torch-scatter -f https://pytorch-geometric.com/whl/torch-1.9.0+cu102.html
#!pip install -q torch-sparse -f https://pytorch-geometric.com/whl/torch-1.9.0+cu102.html
#!pip install torch-geometric

import os

import torch
import torch.nn.functional as F
from torch_geometric.datasets import Planetoid
import torch_geometric.transforms as T
from torch_geometric.nn import GCNConv

dataset = Planetoid(root="data/Planetoid", name="Cora", transform=T.NormalizeFeatures())

print(f"Dataset: {dataset}")
print(f"Number of graph in the dataset: {len(dataset)}")
print(f"Feature vector size of each node: {dataset.num_features}")
print(f"Number of classes: {dataset.num_classes}")

data = dataset[0]

print(data)
print(f"Number of node: {data.num_nodes}")
print(f"Number of eges: {data.num_edges}")
print(f"Average node degree: {data.num_edges/data.num_nodes:.2f}")
print(f"Number of training nodes: {data.train_mask.sum()}")
print(f"Training node label rate: {data.train_mask.sum()/data.num_nodes:.2f}")
print(f"Contains ioslated nodes: {data.has_isolated_nodes()}") # publication w/o citations
print(f"Contains self-loops: {data.has_self_loops()}") # publication that cites themselves
print(f"Is undirected: {data.is_undirected()}")

class GCNConvNet(torch.nn.Module):
    def __init__(self):
        super(GCNConvNet, self).__init__()
        self.conv1 = GCNConv(dataset.num_features, 16, cached=True, normalize=True)
        self.conv2 = GCNConv(16, dataset.num_classes, cached=True, normalize=True)
    
    def forward(self, data):
        x, edge_index, edge_weight = data.x, data.edge_index, data.edge_attr
        x = F.relu(self.conv1(x, edge_index, edge_weight))
        x = F.dropout(x, training=self.training)
        x = self.conv2(x, edge_index, edge_weight)
        return F.log_softmax(x, dim=1)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model, data = GCNConvNet().to(device), data.to(device)
optimizer = torch.optim.Adam([
    dict(params=model.conv1.parameters(), weight_decay=5e-4),
    dict(params=model.conv2.parameters(), weight_decay=0),
    ], lr=0.01)

def train():
    model.train()
    optimizer.zero_grad()
    output = model(data)
    loss = F.nll_loss(output[data.train_mask], data.y[data.train_mask])
    loss.backward()
    optimizer.step()

@torch.no_grad()
def test():
    model.eval()
    logits, accs = model(data), []
    for _, mask in data("train_mask", "val_mask", "test_mask"):
        pred = logits[mask].max(1)[1]
        acc = pred.eq(data.y[mask]).sum().item() / mask.sum().item()
        accs.append(acc)
    return accs

best_val_acc = test_acc = 0
for epoch in range(1, 201):
    train()
    train_acc, val_acc, tmp_test_acc = test()
    if val_acc > best_val_acc:
        best_val_acc = val_acc
        test_acc = tmp_test_acc
    log = 'Epoch: {:03d}, Train: {:.4f}, Val: {:.4f}, Test: {:.4f}'
    print(log.format(epoch, train_acc, best_val_acc, test_acc))

"""#### Reference

1. [PyG - GCN Example](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn.py)
2. [Cora Dataset](https://graphsandnetworks.com/the-cora-dataset/)
"""